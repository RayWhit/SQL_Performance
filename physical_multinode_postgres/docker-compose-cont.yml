services:
  gql_ug:
    image: kavic/ug:latest
    container_name: z-gql_ug_Holik-Kava
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_HOST=postgres:5432
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=True
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy

    depends_on:
      postgres:
        condition: service_started

    ports: #v deploymentu by nebylo zadne mapovani portu
      - 31120:8000
  
  

  gql_events:
    image: nafreju2/gql_events:latest
    container_name: z-gql_events_Bures-Sedlackova
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_HOST=postgres:5432
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      gql_ug:
        condition: service_started
      gql_facilities:
        condition: service_started
      gql_externalids:
        condition: service_started

    ports:
      - 31126:8000  # ray made up this port number
  


  gql_externalids:
    image: gjia/gql_externalids:main
    container_name: z-gql_externalids_Quach-Nguyen
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_HOST=postgres:5432
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      gql_ug:
        condition: service_started
    
    ports:
      - 32801:8000 # ray made up this port number



  gql_facilities:
    image: vitekr/gql_facilities:latest
    container_name: z-gql_facilities_Rout-Stacha
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_HOST=postgres:5432
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=True
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 60s
      retries: 10
      start_period: 60s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy

    depends_on:
      postgres:
        condition: service_started
      gql_ug:
        condition: service_started
    
    ports: #v deploymentu by nebylo zadne mapovani portu
       - 31125:8000



  gql_facilities_hrbolek:
    image: hrbolek/gql_facilities:latest
    container_name: z-gql_facilities_Hrbolek
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_HOST=postgres:5432
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=True
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 60s
      retries: 10
      start_period: 60s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy

    depends_on:
      postgres:
        condition: service_started
      gql_ug:
        condition: service_started
    
    ports: #v deploymentu by nebylo zadne mapovani portu
       - 41125:8000
  


  gql_forms:
    image: hrbolek/gql_forms:latest
    container_name: z-gql_forms_Hrbolek
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_HOST=postgres:5432
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=True
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 30s
      retries: 10
      start_period: 30s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
  
    depends_on:
      postgres:
        condition: service_started
      gql_ug:
        condition: service_started
      gql_events:
        condition: service_started
      gql_externalids:
        condition: service_started
      gql_facilities:
        condition: service_started
    
    ports:
      - 31127:8000  # ray made this port number up


  gql_granting:
    image: oklement/gql_granting:latest
    container_name: z-gql_granting_Klement-Novotny-Wala
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_HOST=postgres:5432
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=True
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      gql_ug:
        condition: service_started
      gql_events:
        condition: service_started
      gql_externalids:
        condition: service_started
      gql_facilities:
        condition: service_started
      gql_forms:
        condition: service_started
    
    ports:
      - 32811:8000 # ray made up this port number




  gql_lessons:
    image: luknowo/gql_lessons:latest
    container_name: z-gql_lessons_Novotny-Veverka
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_HOST=postgres:5432
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      gql_ug:
        condition: service_started
      gql_events:
        condition: service_started
      gql_externalids:
        condition: service_started
      gql_facilities:
        condition: service_started
      gql_forms:
        condition: service_started
      gql_granting:
        condition: service_started

    ports:
      - 31124:8000 # ray made up this port number



  gql_preferences:
    image: haki22/gql-preferences:latest
    container_name: z-gql_preferences_Sittek
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_HOST=postgres:5432
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=True
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      gql_ug:
        condition: service_started
      gql_events:
        condition: service_started
      gql_externalids:
        condition: service_started
      gql_facilities:
        condition: service_started
      gql_forms:
        condition: service_started
      gql_granting:
        condition: service_started
      gql_lessons:
        condition: service_started

    ports:
      - 32123:8000  # ray made this port number up



  gql_projects:
    image: frajxd/gql_projects:latest
    container_name: z-gql_projects_Smid-Spanik
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_HOST=postgres:5432
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=True
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      gql_ug:
        condition: service_started
      gql_events:
        condition: service_started
      gql_externalids:
        condition: service_started
      gql_facilities:
        condition: service_started
      gql_forms:
        condition: service_started
      gql_granting:
        condition: service_started
      gql_lessons:
        condition: service_started
      gql_preferences:
        condition: service_started

    ports:
      - 32800:8000



  gql_surveys:
    image: komandosscz/surveys:latest
    container_name: z-gql_surveys_Koza_Matejka
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_HOST=postgres:5432
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      gql_ug:
        condition: service_started
      gql_events:
        condition: service_started
      gql_externalids:
        condition: service_started
      gql_facilities:
        condition: service_started
      gql_forms:
        condition: service_started
      gql_granting:
        condition: service_started
      gql_lessons:
        condition: service_started
      gql_preferences:
        condition: service_started
      gql_projects:
        condition: service_started
    
    ports:
      - 32122:8000  # ray made this port number up



  gql_workflow:
    image: taido028/gql_workflow:latest
    container_name: z-gql_workflow_Bui-Do
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_HOST=postgres:5432
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      gql_ug:
        condition: service_started
      gql_events:
        condition: service_started
      gql_externalids:
        condition: service_started
      gql_facilities:
        condition: service_started
      gql_forms:
        condition: service_started
      gql_granting:
        condition: service_started
      gql_lessons:
        condition: service_started
      gql_preferences:
        condition: service_started
      gql_projects:
        condition: service_started
      gql_surveys:
        condition: service_started

    ports:
      - 31123:8000




  gql_workflows:
    image: angell1337/gql_workflows:latest
    container_name: z-gql_workflows_Krivohlavek-Samolej
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_HOST=postgres:5432
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=True
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      gql_ug:
        condition: service_started
      gql_events:
        condition: service_started
      gql_externalids:
        condition: service_started
      gql_facilities:
        condition: service_started
      gql_forms:
        condition: service_started
      gql_granting:
        condition: service_started
      gql_lessons:
        condition: service_started
      gql_preferences:
        condition: service_started
      gql_projects:
        condition: service_started
      gql_surveys:
        condition: service_started
      gql_workflow:
        condition: service_started
    
    ports:
      - 31133:8000  # ray made up this port number




  gql_documents:
    image: tadblack/gql_documents:latest
    container_name: z-gql_documents_Masek-Paldus
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_HOST=postgres:5432
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      gql_ug:
        condition: service_started
      gql_events:
        condition: service_started
      gql_externalids:
        condition: service_started
      gql_facilities:
        condition: service_started
      gql_forms:
        condition: service_started
      gql_granting:
        condition: service_started
      gql_lessons:
        condition: service_started
      gql_preferences:
        condition: service_started
      gql_projects:
        condition: service_started
      gql_surveys:
        condition: service_started
      gql_workflow:
        condition: service_started
      gql_workflows:
        condition: service_started
    
    ports:
      - 20088:8000



  gql_presences:
    image: davidnemecek4227/gql_presences:main
    container_name: z-gql_presences_Nemecek
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_HOST=postgres:5432
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      gql_ug:
        condition: service_started
      gql_events:
        condition: service_started
      gql_externalids:
        condition: service_started
      gql_facilities:
        condition: service_started
      gql_forms:
        condition: service_started
      gql_granting:
        condition: service_started
      gql_lessons:
        condition: service_started
      gql_preferences:
        condition: service_started
      gql_projects:
        condition: service_started
      gql_surveys:
        condition: service_started
      gql_workflow:
        condition: service_started
      gql_workflows:
        condition: service_started
      gql_documents:
        condition: service_started
    
    ports:
      - 31121:8000  # ray made this port number up



  gql_publications_a:
    image: kozmycz/gql_publications_a:latest
    container_name: z-gql_publications_a_Kozma
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_HOST=postgres:5432
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      gql_ug:
        condition: service_started
      gql_events:
        condition: service_started
      gql_externalids:
        condition: service_started
      gql_facilities:
        condition: service_started
      gql_forms:
        condition: service_started
      gql_granting:
        condition: service_started
      gql_lessons:
        condition: service_started
      gql_preferences:
        condition: service_started
      gql_projects:
        condition: service_started
      gql_surveys:
        condition: service_started
      gql_workflow:
        condition: service_started
      gql_workflows:
        condition: service_started
      gql_documents:
        condition: service_started
      gql_presences:
        condition: service_started

    ports:
      - 31223:8000  # ray made this port number up



  gql_grantinga:
    image: hieuductran231/gql_granting:main
    container_name: z-gql_grantinga_Tran
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_HOST=postgres:5432
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=True
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      gql_ug:
        condition: service_started
      gql_events:
        condition: service_started
      gql_externalids:
        condition: service_started
      gql_facilities:
        condition: service_started
      gql_forms:
        condition: service_started
      gql_granting:
        condition: service_started
      gql_lessons:
        condition: service_started
      gql_preferences:
        condition: service_started
      gql_projects:
        condition: service_started
      gql_surveys:
        condition: service_started
      gql_workflow:
        condition: service_started
      gql_workflows:
        condition: service_started
      gql_documents:
        condition: service_started
      gql_presences:
        condition: service_started
      gql_publications_a:
        condition: service_started
    
    ports:
      - 31122:8000  # ray made this port number up