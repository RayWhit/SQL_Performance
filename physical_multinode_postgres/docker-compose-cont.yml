services:
############# apollo #######################
  apollo:
    image: hrbolek/apollo_federation:latest
    container_name: apollo
    environment:
      # promenne, ktere lze cist v kontejneru
      PORT: 3000
      SERVICES: '[
          {"name": "ug", "url": "http://localhost:31000/gql"},
          {"name": "forms", "url": "http://localhost:31005/gql"},
          {"name": "facilities", "url": "http://localhost:31004/gql"},
          {"name": "events", "url": "http://localhost:31001/gql"},
          {"name": "granting", "url": "http://localhost:31006/gql"},
          {"name": "lessons", "url": "http://localhost:31007/gql"},
          {"name": "workflow", "url": "http://localhost:31011/gql"},
          {"name": "workflows", "url": "http://localhost:31012/gql"},
          {"name": "documents", "url": "http://localhost:31013/gql"},
          {"name": "presences", "url": "http://localhost:31014/gql"},
          {"name": "surveys", "url": "http://localhost:31010/gql"}
        ]'
      # ug has to be part of services
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku (vsimnete si portu a srovnejte s portem v environment)
      interval: 60s
      retries: 3
      start_period: 60s
      timeout: 10s
    restart: on-failure:5 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      - gql_events
      - gql_externalids
      - gql_facilities
      - gql_forms
      - gql_granting
      - gql_lessons
      - gql_preferences
      - gql_projects
      - gql_surveys
      - gql_ug
      # - gql_ug_hrbolek
      - gql_workflow
      - gql_workflows
      - gql_documents
      - gql_presences
      - gql_publications_a
      - gql_grantinga
    network_mode: "host"

  gql_ug:
    image: kavic/ug:latest
    container_name: z-gql_ug_Holik-Kava
    environment:
      # promenne, ktere lze cist v kontejneru
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_HOST: 192.168.56.104:5432
      POSTGRES_DB: data
      GQLUG_ENDPOINT_URL: http://gql_ug:8000/gql
      # JWTPUBLICKEYURL: http://frontend:8000/oauth/publickey
      # JWTRESOLVEUSERPATHURL: http://frontend:8000/oauth/userinfo
      DEMO: "True"
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:5 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    ports: #v deploymentu by nebylo zadne mapovani portu
      - 31000:8000  # ray made up this port number

  gql_events:
    image: nafreju2/gql_events:latest
    container_name: z-gql_events_Bures-Sedlackova
    environment:
      # promenne, ktere lze cist v kontejneru
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_HOST: 192.168.56.104:5432
      POSTGRES_DB: data
      GQLUG_ENDPOINT_URL: http://gql_ug:8000/gql
      # JWTPUBLICKEYURL: http://frontend:8000/oauth/publickey
      # JWTRESOLVEUSERPATHURL: http://frontend:8000/oauth/userinfo
      DEMO: "True"
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:5 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      gql_ug:
        condition: service_started
      gql_facilities:
        condition: service_started
      gql_externalids:
        condition: service_started
    ports:
      - 31001:8000  # ray made up this port number
  
  gql_externalids:
    image: gjia/gql_externalids:main
    container_name: z-gql_externalids_Quach-Nguyen
    environment:
      # promenne, ktere lze cist v kontejneru
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_HOST: 192.168.56.104:5432
      POSTGRES_DB: data
      GQLUG_ENDPOINT_URL: http://gql_ug:8000/gql
      # JWTPUBLICKEYURL: http://frontend:8000/oauth/publickey
      # JWTRESOLVEUSERPATHURL: http://frontend:8000/oauth/userinfo
      DEMO: "True"
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:5 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      gql_ug:
        condition: service_started
    ports:
      - 31002:8000 # ray made up this port number

  gql_facilities:
    image: vitekr/gql_facilities:latest
    container_name: z-gql_facilities_Rout-Stacha
    environment:
      # promenne, ktere lze cist v kontejneru
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_HOST: 192.168.56.104:5432
      POSTGRES_DB: data
      GQLUG_ENDPOINT_URL: http://gql_ug:8000/gql
      # JWTPUBLICKEYURL: http://frontend:8000/oauth/publickey
      # JWTRESOLVEUSERPATHURL: http://frontend:8000/oauth/userinfo
      DEMO: "True"
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 60s
      retries: 10
      start_period: 60s
      timeout: 10s
    restart: on-failure:5 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      gql_ug:
        condition: service_started
    ports: #v deploymentu by nebylo zadne mapovani portu
      - 31003:8000  # ray made up this port number

  gql_facilities_hrbolek:
    image: hrbolek/gql_facilities:latest
    container_name: z-gql_facilities_Hrbolek
    environment:
      # promenne, ktere lze cist v kontejneru
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_HOST: 192.168.56.104:5432
      POSTGRES_DB: data
      GQLUG_ENDPOINT_URL: http://gql_ug:8000/gql
      JWTPUBLICKEYURL: http://192.168.56.104:8000/oauth/publickey
      JWTRESOLVEUSERPATHURL: http://192.168.56.104:8000/oauth/userinfo
      DEMO: "True"
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 60s
      retries: 10
      start_period: 60s
      timeout: 10s
    restart: on-failure:5 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      gql_ug:
        condition: service_started
    ports: #v deploymentu by nebylo zadne mapovani portu
      - 31004:8000  # ray made up this port number
  
  gql_forms:
    image: hrbolek/gql_forms:latest
    container_name: z-gql_forms_Hrbolek
    environment:
      # promenne, ktere lze cist v kontejneru
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_HOST: 192.168.56.104:5432
      POSTGRES_DB: data
      GQLUG_ENDPOINT_URL: http://gql_ug:8000/gql
      # JWTPUBLICKEYURL: http://frontend:8000/oauth/publickey
      # JWTRESOLVEUSERPATHURL: http://frontend:8000/oauth/userinfo
      DEMO: "True"
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 30s
      retries: 10
      start_period: 30s
      timeout: 10s
    restart: on-failure:5 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      gql_ug:
        condition: service_started
      gql_events:
        condition: service_started
      gql_externalids:
        condition: service_started
      gql_facilities:
        condition: service_started
    ports:
      - 31005:8000  # ray made up this port number

  gql_granting:
    image: oklement/gql_granting:latest
    container_name: z-gql_granting_Klement-Novotny-Wala
    environment:
      # promenne, ktere lze cist v kontejneru
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_HOST: 192.168.56.104:5432
      POSTGRES_DB: data
      GQLUG_ENDPOINT_URL: http://gql_ug:8000/gql
      # JWTPUBLICKEYURL: http://frontend:8000/oauth/publickey
      # JWTRESOLVEUSERPATHURL: http://frontend:8000/oauth/userinfo
      DEMO: "True"
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:5 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      gql_ug:
        condition: service_started
      gql_events:
        condition: service_started
      gql_externalids:
        condition: service_started
      gql_facilities:
        condition: service_started
      gql_forms:
        condition: service_started
    ports:
      - 31006:8000  # ray made up this port number

  gql_lessons:
    image: luknowo/gql_lessons:latest
    container_name: z-gql_lessons_Novotny-Veverka
    environment:
      # promenne, ktere lze cist v kontejneru
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_HOST: 192.168.56.104:5432
      POSTGRES_DB: data
      GQLUG_ENDPOINT_URL: http://gql_ug:8000/gql
      # JWTPUBLICKEYURL: http://frontend:8000/oauth/publickey
      # JWTRESOLVEUSERPATHURL: http://frontend:8000/oauth/userinfo
      DEMO: "True"
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:5 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      gql_ug:
        condition: service_started
      gql_events:
        condition: service_started
      gql_externalids:
        condition: service_started
      gql_facilities:
        condition: service_started
      gql_forms:
        condition: service_started
      gql_granting:
        condition: service_started
    ports:
      - 31007:8000  # ray made up this port number

  gql_preferences:
    image: haki22/gql-preferences:latest
    container_name: z-gql_preferences_Sittek
    environment:
      # promenne, ktere lze cist v kontejneru
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_HOST: 192.168.56.104:5432
      POSTGRES_DB: data
      GQLUG_ENDPOINT_URL: http://gql_ug:8000/gql
      # JWTPUBLICKEYURL: http://frontend:8000/oauth/publickey
      # JWTRESOLVEUSERPATHURL: http://frontend:8000/oauth/userinfo
      DEMO: "True"
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:5 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      gql_ug:
        condition: service_started
      gql_events:
        condition: service_started
      gql_externalids:
        condition: service_started
      gql_facilities:
        condition: service_started
      gql_forms:
        condition: service_started
      gql_granting:
        condition: service_started
      gql_lessons:
        condition: service_started
    ports:
      - 31008:8000  # ray made up this port number

  gql_projects:
    image: frajxd/gql_projects:latest
    container_name: z-gql_projects_Smid-Spanik
    environment:
      # promenne, ktere lze cist v kontejneru
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_HOST: 192.168.56.104:5432
      POSTGRES_DB: data
      GQLUG_ENDPOINT_URL: http://gql_ug:8000/gql
      # JWTPUBLICKEYURL: http://frontend:8000/oauth/publickey
      # JWTRESOLVEUSERPATHURL: http://frontend:8000/oauth/userinfo
      DEMO: "True"
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:5 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      gql_ug:
        condition: service_started
      gql_events:
        condition: service_started
      gql_externalids:
        condition: service_started
      gql_facilities:
        condition: service_started
      gql_forms:
        condition: service_started
      gql_granting:
        condition: service_started
      gql_lessons:
        condition: service_started
      gql_preferences:
        condition: service_started
    ports:
      - 31009:8000  # ray made up this port number

  gql_surveys:
    image: komandosscz/surveys:latest
    container_name: z-gql_surveys_Koza_Matejka
    environment:
      # promenne, ktere lze cist v kontejneru
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_HOST: 192.168.56.104:5432
      POSTGRES_DB: data
      GQLUG_ENDPOINT_URL: http://gql_ug:8000/gql
      # JWTPUBLICKEYURL: http://frontend:8000/oauth/publickey
      # JWTRESOLVEUSERPATHURL: http://frontend:8000/oauth/userinfo
      DEMO: "True"
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:5 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      gql_ug:
        condition: service_started
      gql_events:
        condition: service_started
      gql_externalids:
        condition: service_started
      gql_facilities:
        condition: service_started
      gql_forms:
        condition: service_started
      gql_granting:
        condition: service_started
      gql_lessons:
        condition: service_started
      gql_preferences:
        condition: service_started
      gql_projects:
        condition: service_started
    ports:
      - 31010:8000  # ray made up this port number

  gql_workflow:
    image: taido028/gql_workflow:latest
    container_name: z-gql_workflow_Bui-Do
    environment:
      # promenne, ktere lze cist v kontejneru
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_HOST: 192.168.56.104:5432
      POSTGRES_DB: data
      GQLUG_ENDPOINT_URL: http://gql_ug:8000/gql
      # JWTPUBLICKEYURL: http://frontend:8000/oauth/publickey
      # JWTRESOLVEUSERPATHURL: http://frontend:8000/oauth/userinfo
      DEMO: "True"
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:5 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      gql_ug:
        condition: service_started
      gql_events:
        condition: service_started
      gql_externalids:
        condition: service_started
      gql_facilities:
        condition: service_started
      gql_forms:
        condition: service_started
      gql_granting:
        condition: service_started
      gql_lessons:
        condition: service_started
      gql_preferences:
        condition: service_started
      gql_projects:
        condition: service_started
      gql_surveys:
        condition: service_started
    ports:
      - 31011:8000  # ray made up this port number

  gql_workflows:
    image: angell1337/gql_workflows:latest
    container_name: z-gql_workflows_Krivohlavek-Samolej
    environment:
      # promenne, ktere lze cist v kontejneru
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_HOST: 192.168.56.104:5432
      POSTGRES_DB: data
      GQLUG_ENDPOINT_URL: http://gql_ug:8000/gql
      # JWTPUBLICKEYURL: http://frontend:8000/oauth/publickey
      # JWTRESOLVEUSERPATHURL: http://frontend:8000/oauth/userinfo
      DEMO: "True"
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:5 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      gql_ug:
        condition: service_started
      gql_events:
        condition: service_started
      gql_externalids:
        condition: service_started
      gql_facilities:
        condition: service_started
      gql_forms:
        condition: service_started
      gql_granting:
        condition: service_started
      gql_lessons:
        condition: service_started
      gql_preferences:
        condition: service_started
      gql_projects:
        condition: service_started
      gql_surveys:
        condition: service_started
      gql_workflow:
        condition: service_started
    ports:
      - 31012:8000  # ray made up this port number

  gql_documents:
    image: tadblack/gql_documents:latest
    container_name: z-gql_documents_Masek-Paldus
    environment:
      # promenne, ktere lze cist v kontejneru
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_HOST: 192.168.56.104:5432
      POSTGRES_DB: data
      GQLUG_ENDPOINT_URL: http://gql_ug:8000/gql
      # JWTPUBLICKEYURL: http://frontend:8000/oauth/publickey
      # JWTRESOLVEUSERPATHURL: http://frontend:8000/oauth/userinfo
      DEMO: "True"
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:5 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      gql_ug:
        condition: service_started
      gql_events:
        condition: service_started
      gql_externalids:
        condition: service_started
      gql_facilities:
        condition: service_started
      gql_forms:
        condition: service_started
      gql_granting:
        condition: service_started
      gql_lessons:
        condition: service_started
      gql_preferences:
        condition: service_started
      gql_projects:
        condition: service_started
      gql_surveys:
        condition: service_started
      gql_workflow:
        condition: service_started
      gql_workflows:
        condition: service_started
    ports:
      - 31013:8000  # ray made up this port number

  gql_presences:
    image: davidnemecek4227/gql_presences:main
    container_name: z-gql_presences_Nemecek
    environment:
      # promenne, ktere lze cist v kontejneru
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_HOST: 192.168.56.104:5432
      POSTGRES_DB: data
      GQLUG_ENDPOINT_URL: http://gql_ug:8000/gql
      # JWTPUBLICKEYURL: http://frontend:8000/oauth/publickey
      # JWTRESOLVEUSERPATHURL: http://frontend:8000/oauth/userinfo
      DEMO: "True"
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:5 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy 
    depends_on:
      gql_ug:
        condition: service_started
      gql_events:
        condition: service_started
      gql_externalids:
        condition: service_started
      gql_facilities:
        condition: service_started
      gql_forms:
        condition: service_started
      gql_granting:
        condition: service_started
      gql_lessons:
        condition: service_started
      gql_preferences:
        condition: service_started
      gql_projects:
        condition: service_started
      gql_surveys:
        condition: service_started
      gql_workflow:
        condition: service_started
      gql_workflows:
        condition: service_started
      gql_documents:
        condition: service_started
    ports:
      - 31014:8000  # ray made up this port number

  gql_publications_a:
    image: kozmycz/gql_publications_a:latest
    container_name: z-gql_publications_a_Kozma
    environment:
      # promenne, ktere lze cist v kontejneru
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_HOST: 192.168.56.104:5432
      POSTGRES_DB: data
      GQLUG_ENDPOINT_URL: http://gql_ug:8000/gql
      # JWTPUBLICKEYURL: http://frontend:8000/oauth/publickey
      # JWTRESOLVEUSERPATHURL: http://frontend:8000/oauth/userinfo
      DEMO: "True"
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:5 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      gql_ug:
        condition: service_started
      gql_events:
        condition: service_started
      gql_externalids:
        condition: service_started
      gql_facilities:
        condition: service_started
      gql_forms:
        condition: service_started
      gql_granting:
        condition: service_started
      gql_lessons:
        condition: service_started
      gql_preferences:
        condition: service_started
      gql_projects:
        condition: service_started
      gql_surveys:
        condition: service_started
      gql_workflow:
        condition: service_started
      gql_workflows:
        condition: service_started
      gql_documents:
        condition: service_started
      gql_presences:
        condition: service_started
    ports:
      - 31015:8000  # ray made up this port number

  gql_grantinga:
    image: hieuductran231/gql_granting:main
    container_name: z-gql_grantinga_Tran
    environment:
      # promenne, ktere lze cist v kontejneru
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_HOST: 192.168.56.104:5432
      POSTGRES_DB: data
      GQLUG_ENDPOINT_URL: http://gql_ug:8000/gql
      # JWTPUBLICKEYURL: http://frontend:8000/oauth/publickey
      # JWTRESOLVEUSERPATHURL: http://frontend:8000/oauth/userinfo
      DEMO: "True"
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:5 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      gql_ug:
        condition: service_started
      gql_events:
        condition: service_started
      gql_externalids:
        condition: service_started
      gql_facilities:
        condition: service_started
      gql_forms:
        condition: service_started
      gql_granting:
        condition: service_started
      gql_lessons:
        condition: service_started
      gql_preferences:
        condition: service_started
      gql_projects:
        condition: service_started
      gql_surveys:
        condition: service_started
      gql_workflow:
        condition: service_started
      gql_workflows:
        condition: service_started
      gql_documents:
        condition: service_started
      gql_presences:
        condition: service_started
      gql_publications_a:
        condition: service_started
    ports:
      - 31016:8000  # ray made up this port number