version: '3.8'



services:
  pgadmin:
    container_name: pgadmin4
    image: "dpage/pgadmin4:7.8"
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:80"


  postgres:
    container_name: postgres_single
    image: "postgres:16.0"
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"



  ############## yugabyte ######################
  yugabyte:
    image: yugabytedb/yugabyte:2.19.3.0-b140
    container_name: yugabyte
    ports:
      - "7000:7000"
      - "9001:9000"   # rebind because of portainer
      - "15433:15433" # cluster GUI
      - "5433:5433"
      - "9042:9042"

    # networks:
    #   - yb_network
    
    command: ["bin/yugabyted", "start", "--daemon=false"]






  apollo:
    image: hrbolek/apollo_federation
    environment:
      # promenne, ktere lze cist v kontejneru
      - PORT=3000
      - |
        SERVICES=
        [
          {"name": "externalids", "url": "http://gql_externalids:8000/gql"}
        ]
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku (vsimnete si portu a srovnejte s portem v environment)
      interval: 60s
      retries: 3
      start_period: 60s
      timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    ports: #v deploymentu by nebylo zadne mapovani portu
    #   # vnejsi port : port, kde sluzbu poskytuje kontejner
      - 33000:3000
    depends_on:
      - gql_externalids
    




  gql_forms:
    image: hrbolek/gql_forms
    #container_name: z-gql_forms_Hrbolek
    # build:
    #   # context definuje cestu k popisu
    #   context: .
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - DEMO=True
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 60s
      retries: 3
      start_period: 60s
      timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      - postgres
    ports:
      - 31127:8000  # ray made this port number up




  gql_facilities:
    image: vitekr/gql_facilities
    container_name: z-gql_facilities_Rout-Stacha
    # build:
    #   # context definuje cestu k popisu
    #   context: ./gql_facilities
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - DEMO=true
      # kontejnery, ktere musi byt spusteny drive
    depends_on:
      - postgres
    # healthcheck:
    #   # definice, umoznujici provest test, zda je kontejner v poradku
    #   test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
    #   interval: 60s
    #   retries: 3
    #   start_period: 60s
    #   timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    ports: #v deploymentu by nebylo zadne mapovani portu
    #   # vnejsi port : port, kde sluzbu poskytuje kontejner
       - 31125:8000



  gql_events:
    image: nafreju2/gql_events:main
    #container_name: z-gql_events_Bures-Sedlackova
    # build:
    #   # context definuje cestu k popisu
    #   context: .
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 60s
      retries: 3
      start_period: 60s
      timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      - postgres
    ports:
      - 31126:8000  # ray made up this port number



  gql_externalids:
    image: gjia/gql_externalids:main
    #container_name: z-gql_externalids_Quach-Nguyen
    # build:
    #   # context definuje cestu k popisu
    #   context: .
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 60s
      retries: 3
      start_period: 60s
      timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      - postgres
    ports:
      - 32801:8000 # ray made up this port number
  


  gql_granting:
    image: oklement/gql_granting
    # container_name: z-gql_granting_Klement-Novotny-Wala
    # build:
    #   # context definuje cestu k popisu
    #   context: .
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - DEMO=true
    # healthcheck:
    #   # definice, umoznujici provest test, zda je kontejner v poradku
    #   test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
    #   interval: 60s
    #   retries: 3
    #   start_period: 60s
    #   timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      - postgres
    ports:
      - 8000:8000




  gql_lessons:
    image: luknowo/gql_lessons
    # container_name: z-gql_lessons_Novotny-Veverka
    # build:
    #   # context definuje cestu k popisu
    #   context: .
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - DEMO=true
    # healthcheck:
    #   # definice, umoznujici provest test, zda je kontejner v poradku
    #   test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
    #   interval: 60s
    #   retries: 3
    #   start_period: 60s
    #   timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      - postgres
    ports:
      - 31124:8000 # ray made up this port number




  gql_projects:
    image: johnysmidy/gql_projects
    # container_name: z-gql_projects_Smid-Spanik
    # build:
    #   # context definuje cestu k popisu
    #   context: .
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - DEMO=true
    # healthcheck:
    #   # definice, umoznujici provest test, zda je kontejner v poradku
    #   test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
    #   interval: 60s
    #   retries: 3
    #   start_period: 60s
    #   timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      - postgres
    ports:
      - 32800:8000




  gql_ug:
    image: kavic/ug
    container_name: z-ug_Holik-Kava
    # build:
    #   # context definuje cestu k popisu
    #   context: ./
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - DEMO=true
      - GQL_PROXY=http://apollo:3000/api/gql/
    depends_on:
      # kontejnery, ktere musi byt spusteny drive
      - postgres
    # healthcheck:
    #   # definice, umoznujici provest test, zda je kontejner v poradku
    #   test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
    #   interval: 60s
    #   retries: 3
    #   start_period: 60s
    #   timeout: 10s
    # volumes:
    #   - ./_extradata:/app/extradata
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    ports: #v deploymentu by nebylo zadne mapovani portu
    #   # vnejsi port : port, kde sluzbu poskytuje kontejner
      - 31120:8000




  gql_workflow:
    image: taido028/gql_workflow
    container_name: z-gql_workflow_Bui-Do
    # build:
    #   # context definuje cestu k popisu
    #   context: .
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - DEMO=true
    # healthcheck:
    #   # definice, umoznujici provest test, zda je kontejner v poradku
    #   test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
    #   interval: 60s
    #   retries: 3
    #   start_period: 60s
    #   timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      - postgres
    ports:
      - 31123:8000




  gql_workflows:
    image: angell1337/gql_workflows
    container_name: z-gql_workflows_Krivohlavek-Samolej
    # build:
    #   # context definuje cestu k popisu
    #   context: .
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - DEMO=true
    # healthcheck:
    #   # definice, umoznujici provest test, zda je kontejner v poradku
    #   test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
    #   interval: 60s
    #   retries: 3
    #   start_period: 60s
    #   timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      - postgres
    ports:
      - 31133:8000  # ray made up this port number




  gql_documents:
    image: tadblack/gql_documents
    container_name: z-gql_documents_Masek-Paldus
    # build:
    #   # context definuje cestu k popisu
    #   context: .
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - DEMO=true
    # healthcheck:
    #   # definice, umoznujici provest test, zda je kontejner v poradku
    #   test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
    #   interval: 60s
    #   retries: 3
    #   start_period: 60s
    #   timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      - postgres
    ports:
      - 20088:8000




  gql_presences:
    image: davidnemecek4227/gql_presences
    container_name: z-gql_presences_Nemecek
    # build:
    #   # context definuje cestu k popisu
    #   context: .
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - DEMO=true
    # healthcheck:
    #   # definice, umoznujici provest test, zda je kontejner v poradku
    #   test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
    #   interval: 60s
    #   retries: 3
    #   start_period: 60s
    #   timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      - postgres
    ports:
      - 31121:8000  # ray made this port number up




  gql_publications_a:
    image: kozmycz/gql_publications_a
    container_name: z-gql_publications_a_Kozma
    # build:
    #   # context definuje cestu k popisu
    #   context: .
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - DEMO=true
    # healthcheck:
    #   # definice, umoznujici provest test, zda je kontejner v poradku
    #   test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
    #   interval: 60s
    #   retries: 3
    #   start_period: 60s
    #   timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      - postgres
    ports:
      - 31223:8000  # ray made this port number up




  gql_grantinga:
    image: hieuductran231/gql_granting:main
    container_name: z-gql_granting_Tran
    # build:
    #   # context definuje cestu k popisu
    #   context: .
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - DEMO=true
    # healthcheck:
    #   # definice, umoznujici provest test, zda je kontejner v poradku
    #   test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
    #   interval: 60s
    #   retries: 3
    #   start_period: 60s
    #   timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      - postgres
    ports:
      - 31122:8000  # ray made this port number up

