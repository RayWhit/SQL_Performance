version: '3.8'



services:
  pgadmin:
    container_name: pgadmin4
    image: "dpage/pgadmin4:7.8"
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:80"


  postgres:
    container_name: postgres_single
    image: "postgres:16.0"
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"



  ############## yugabyte ######################
  yugabyte1:
    image: yugabytedb/yugabyte:2.19.3.0-b140
    container_name: yugabyte1
    ports:
      - "7000:7000"
      - "9001:9000"   # rebind because of portainer
      - "15433:15433" # cluster GUI
      - "5433:5433"
      - "9042:9042"

    # networks:
    #   - yb_network
    
    command: ["bin/yugabyted", "start", "--daemon=false"]


  yugabyte2:
    image: yugabytedb/yugabyte:2.19.3.0-b140
    container_name: yugabyte2
    # ports:
    #   - "7000:7000"
    #   - "9001:9000"   # rebind because of portainer
    #   - "15433:15433" # cluster GUI
    #   - "5433:5433"
    #   - "9042:9042"

    # networks:
    #   - yb_network
    
    command: ["bin/yugabyted", "start", "--daemon=false", "--join=yugabyte1"]
    depends_on:
      - yugabyte1
    restart: on-failure:10


  yugabyte3:
    image: yugabytedb/yugabyte:2.19.3.0-b140
    container_name: yugabyte3
    # ports:
    #   - "7000:7000"
    #   - "9001:9000"   # rebind because of portainer
    #   - "15433:15433" # cluster GUI
    #   - "5433:5433"
    #   - "9042:9042"

    # networks:
    #   - yb_network
    
    command: ["bin/yugabyted", "start", "--daemon=false", "--join=yugabyte1"]
    depends_on:
      - yugabyte1
    restart: on-failure:10


  # creates database "data" after yugabyte nodes start
  yugabyte-init:
    image: yugabytedb/yugabyte:2.19.3.0-b140
    container_name: yugabyte-init
    depends_on:
      - yugabyte1
      - yugabyte2
      - yugabyte3
    entrypoint: /bin/sh
    command: -c "sleep 20 && /home/yugabyte/bin/ysqlsh --echo-queries --host yugabyte1 -U postgres -d postgres -c 'CREATE DATABASE data;'"



############# apollo #######################
  apollo:
    image: hrbolek/apollo_federation:latest
    container_name: apollo
    environment:
      # promenne, ktere lze cist v kontejneru
      - PORT=3000
      - |
        SERVICES=
        [
          {"name": "ug", "url": "http://gql_ug_hrbolek:8000/gql"},
          {"name": "forms", "url": "http://gql_forms:8000/gql"},
          {"name": "events", "url": "http://gql_events:8000/gql"},
          {"name": "externalids", "url": "http://gql_externalids:8000/gql"},
          {"name": "granting", "url": "http://gql_granting:8000/gql"},
          {"name": "workflows", "url": "http://gql_workflows:8000/gql"},
          {"name": "documents", "url": "http://gql_documents:8000/gql"},
          {"name": "surveys", "url": "http://gql_surveys:8000/gql"}
        ]
      # ug has to be part of services

      # {"name": "ug", "url": "http://gql_ug_hrbolek:8000/gql"},
      # {"name": "forms", "url": "http://gql_forms:8000/gql"},
      # {"name": "events", "url": "http://gql_events:8000/gql"},
      # {"name": "externalids", "url": "http://gql_externalids:8000/gql"},
      # {"name": "granting", "url": "http://gql_granting:8000/gql"},
      # {"name": "workflows", "url": "http://gql_workflows:8000/gql"},
      # {"name": "documents", "url": "http://gql_documents:8000/gql"},
      # {"name": "surveys", "url": "http://gql_surveys:8000/gql"}


      # services
      # {"name": "ug", "url": "http://gql_ug_hrbolek:8000/gql"},
      # {"name": "ug", "url": "http://gql_ug:8000/gql"},
      # {"name": "forms", "url": "http://gql_forms:8000/gql"},
      # {"name": "facilities", "url": "http://gql_facilities:8000/gql"},
      # {"name": "events", "url": "http://gql_events:8000/gql"},
      # {"name": "externalids", "url": "http://gql_externalids:8000/gql"},
      # {"name": "granting", "url": "http://gql_granting:8000/gql"},
      # {"name": "lessons", "url": "http://gql_lessons:8000/gql"},
      # {"name": "projects", "url": "http://gql_projects:8000/gql/"},
      # {"name": "workflow", "url": "http://gql_workflow:8000/gql"},
      # {"name": "workflows", "url": "http://gql_workflows:8000/gql"},
      # {"name": "documents", "url": "http://gql_documents:8000/gql"},
      # {"name": "presences", "url": "http://gql_presences:8000/gql"},
      # {"name": "publications_a", "url": "http://gql_publications_a:8000/gql"},
      # {"name": "grantinga", "url": "http://gql_grantinga:8000/gql"},
      # {"name": "preferences", "url": "http://gql_preferences:8000/gql"},
      # {"name": "surveys", "url": "http://gql_surveys:8000/gql"}

    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku (vsimnete si portu a srovnejte s portem v environment)
      interval: 60s
      retries: 3
      start_period: 60s
      timeout: 10s
    
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    ports: #v deploymentu by nebylo zadne mapovani portu
    #   # vnejsi port : port, kde sluzbu poskytuje kontejner
      - 33000:3000
    depends_on:
      - postgres
      - yugabyte1
      - yugabyte2
      - yugabyte3
      #- yugabyte-init
      - frontend
      - gql_events
      - gql_externalids
      - gql_facilities
      - gql_forms
      - gql_granting
      - gql_lessons
      - gql_preferences
      - gql_projects
      - gql_surveys
      - gql_ug
      - gql_ug_hrbolek
      - gql_workflow
      - gql_workflows
      - gql_documents
      - gql_presences
      - gql_publications_a
      - gql_grantinga
    



######################## frontend ##############################
  frontend:
    image: hrbolek/frontend
    container_name: frontend
    environment:
      - DEMO=False
      - GQL_PROXY=http://apollo:3000/api/gql/
    ports:
      - 33080:8000


######################## student containers ##############################
  gql_forms:
    image: hrbolek/gql_forms:latest
    container_name: z-gql_forms_Hrbolek
    # build:
    #   # context definuje cestu k popisu
    #   context: .
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - GQLUG_ENDPOINT_URL=http://gql_ug_hrbolek:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=True
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 30s
      retries: 10
      start_period: 30s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
  
    depends_on:
      postgres:
        condition: service_started
      yugabyte1:
        condition: service_started
      yugabyte2:
        condition: service_started
      yugabyte3:
        condition: service_started
      yugabyte-init:
        condition: service_completed_successfully
      frontend:
        condition: service_started
    
    ports:
      - 31127:8000  # ray made this port number up
  
  
  gql_ug_hrbolek:
    image: hrbolek/gql_ug:latest
    container_name: z-gql_ug_Hrbolek

    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - GQLUG_ENDPOINT_URL=http://gql_ug_hrbolek:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=True
    
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql || exit 1"
      interval: 30s
      retries: 10
      start_period: 30s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      yugabyte1:
        condition: service_started
      yugabyte2:
        condition: service_started
      yugabyte3:
        condition: service_started
      yugabyte-init:
        condition: service_completed_successfully
      


  gql_facilities:
    image: vitekr/gql_facilities:v1.2.6
    container_name: z-gql_facilities_Rout-Stacha
    # build:
    #   # context definuje cestu k popisu
    #   context: ./gql_facilities
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - GQLUG_ENDPOINT_URL=http://gql_ug_hrbolek:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
      # kontejnery, ktere musi byt spusteny drive
    
    
    
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 60s
      retries: 10
      start_period: 60s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy

    depends_on:
      postgres:
        condition: service_started
      yugabyte1:
        condition: service_started
      yugabyte2:
        condition: service_started
      yugabyte3:
        condition: service_started
      yugabyte-init:
        condition: service_completed_successfully
      frontend:
        condition: service_started
    
    ports: #v deploymentu by nebylo zadne mapovani portu
    #   # vnejsi port : port, kde sluzbu poskytuje kontejner
       - 31125:8000



  gql_events:
    image: nafreju2/gql_events:latest
    container_name: z-gql_events_Bures-Sedlackova
    # build:
    #   # context definuje cestu k popisu
    #   context: .
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - GQLUG_ENDPOINT_URL=http://gql_ug_hrbolek:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
    
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      yugabyte1:
        condition: service_started
      yugabyte2:
        condition: service_started
      yugabyte3:
        condition: service_started
      yugabyte-init:
        condition: service_completed_successfully
      frontend:
        condition: service_started
      # gql_facilities:
      #   condition: service_healthy
      # gql_facilities:
      #   condition: service_healthy

    ports:
      - 31126:8000  # ray made up this port number



  gql_externalids:
    image: gjia/gql_externalids:main
    container_name: z-gql_externalids_Quach-Nguyen
    # build:
    #   # context definuje cestu k popisu
    #   context: .
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - GQLUG_ENDPOINT_URL=http://gql_ug_hrbolek:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
    
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      yugabyte1:
        condition: service_started
      yugabyte2:
        condition: service_started
      yugabyte3:
        condition: service_started
      yugabyte-init:
        condition: service_completed_successfully
      frontend:
        condition: service_started
      # gql_forms:
      #   condition: service_healthy
      # gql_facilities:
      #   condition: service_healthy
    
    ports:
      - 32801:8000 # ray made up this port number
  


  gql_granting:
    image: oklement/gql_granting:latest
    container_name: z-gql_granting_Klement-Novotny-Wala
    # build:
    #   # context definuje cestu k popisu
    #   context: .
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - GQLUG_ENDPOINT_URL=http://gql_ug_hrbolek:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=True
    
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      yugabyte1:
        condition: service_started
      yugabyte2:
        condition: service_started
      yugabyte3:
        condition: service_started
      yugabyte-init:
        condition: service_completed_successfully
      frontend:
        condition: service_started
      # gql_forms:
      #   condition: service_healthy
      # gql_facilities:
      #   condition: service_healthy
      # gql_events:
      #   condition: service_healthy
    
    ports:
      - 32811:8000 # ray made up this port number




  gql_lessons:
    image: luknowo/gql_lessons:latest
    container_name: z-gql_lessons_Novotny-Veverka
    # build:
    #   # context definuje cestu k popisu
    #   context: .
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - GQLUG_ENDPOINT_URL=http://gql_ug_hrbolek:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      yugabyte1:
        condition: service_started
      yugabyte2:
        condition: service_started
      yugabyte3:
        condition: service_started
      yugabyte-init:
        condition: service_completed_successfully
      frontend:
        condition: service_started
      # gql_forms:
      #   condition: service_healthy
      # gql_facilities:
      #   condition: service_healthy
      # gql_events:
      #   condition: service_healthy

    ports:
      - 31124:8000 # ray made up this port number




  gql_projects:
    image: frajxd/gql_projects:latest
    container_name: z-gql_projects_Smid-Spanik
    # build:
    #   # context definuje cestu k popisu
    #   context: .
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - GQLUG_ENDPOINT_URL=http://gql_ug_hrbolek:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      yugabyte1:
        condition: service_started
      yugabyte2:
        condition: service_started
      yugabyte3:
        condition: service_started
      yugabyte-init:
        condition: service_completed_successfully
      frontend:
        condition: service_started
      # gql_forms:
      #   condition: service_healthy
      # gql_facilities:
      #   condition: service_healthy
      # gql_events:
      #   condition: service_healthy
      # gql_granting:
      #   condition: service_healthy
      # gql_lessons:
      #   condition: service_healthy


    ports:
      - 32800:8000




  gql_ug:
    image: kavic/ug:latest
    container_name: z-gql_ug_Holik-Kava
    # build:
    #   # context definuje cestu k popisu
    #   context: ./
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - GQLUG_ENDPOINT_URL=http://gql_ug_hrbolek:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
      - GQL_PROXY=http://apollo:3000/api/gql/
    
    depends_on:
      # kontejnery, ktere musi byt spusteny drive
      postgres:
        condition: service_started
      yugabyte1:
        condition: service_started
      yugabyte2:
        condition: service_started
      yugabyte3:
        condition: service_started
      yugabyte-init:
        condition: service_completed_successfully
      # gql_forms:
      #   condition: service_healthy
      # gql_facilities:
      #   condition: service_healthy
      # gql_events:
      #   condition: service_healthy
      # gql_granting:
      #   condition: service_healthy
      # gql_lessons:
      #   condition: service_healthy

    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    # volumes:
    #   - ./_extradata:/app/extradata
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    ports: #v deploymentu by nebylo zadne mapovani portu
    #   # vnejsi port : port, kde sluzbu poskytuje kontejner
      - 31120:8000




  gql_workflow:
    image: taido028/gql_workflow:Latest_tag
    container_name: z-gql_workflow_Bui-Do
    # build:
    #   # context definuje cestu k popisu
    #   context: .
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - GQLUG_ENDPOINT_URL=http://gql_ug_hrbolek:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      yugabyte1:
        condition: service_started
      yugabyte2:
        condition: service_started
      yugabyte3:
        condition: service_started
      yugabyte-init:
        condition: service_completed_successfully
      frontend:
        condition: service_started
      # gql_forms:
      #   condition: service_healthy
      # gql_facilities:
      #   condition: service_healthy
      # gql_events:
      #   condition: service_healthy
      # gql_granting:
      #   condition: service_healthy
      # gql_lessons:
      #   condition: service_healthy
      # gql_projects:
      #   condition: service_healthy
      # gql_ug:
      #   condition: service_healthy

    ports:
      - 31123:8000




  gql_workflows:
    image: angell1337/gql_workflows:latest
    container_name: z-gql_workflows_Krivohlavek-Samolej
    # build:
    #   # context definuje cestu k popisu
    #   context: .
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - GQLUG_ENDPOINT_URL=http://gql_ug_hrbolek:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      yugabyte1:
        condition: service_started
      yugabyte2:
        condition: service_started
      yugabyte3:
        condition: service_started
      yugabyte-init:
        condition: service_completed_successfully
      frontend:
        condition: service_started
      # gql_forms:
      #   condition: service_healthy
      # gql_facilities:
      #   condition: service_healthy
      # gql_events:
      #   condition: service_healthy
      # gql_granting:
      #   condition: service_healthy
      # gql_lessons:
      #   condition: service_healthy
      # gql_projects:
      #   condition: service_healthy
      # gql_ug:
      #   condition: service_healthy
    
    ports:
      - 31133:8000  # ray made up this port number




  gql_documents:
    image: tadblack/gql_documents:latest
    container_name: z-gql_documents_Masek-Paldus
    # build:
    #   # context definuje cestu k popisu
    #   context: .
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - GQLUG_ENDPOINT_URL=http://gql_ug_hrbolek:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      yugabyte1:
        condition: service_started
      yugabyte2:
        condition: service_started
      yugabyte3:
        condition: service_started
      yugabyte-init:
        condition: service_completed_successfully
      frontend:
        condition: service_started
      # gql_forms:
      #   condition: service_healthy
      # gql_facilities:
      #   condition: service_healthy
      # gql_events:
      #   condition: service_healthy
      # gql_granting:
      #   condition: service_healthy
      # gql_lessons:
      #   condition: service_healthy
      # gql_projects:
      #   condition: service_healthy
      # gql_ug:
      #   condition: service_healthy
      # gql_workflow:
      #   condition: service_healthy
      # gql_workflows:
      #   condition: service_healthy
    
    ports:
      - 20088:8000




  gql_presences:
    image: davidnemecek4227/gql_presences:main
    container_name: z-gql_presences_Nemecek
    # build:
    #   # context definuje cestu k popisu
    #   context: .
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - GQLUG_ENDPOINT_URL=http://gql_ug_hrbolek:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      yugabyte1:
        condition: service_started
      yugabyte2:
        condition: service_started
      yugabyte3:
        condition: service_started
      yugabyte-init:
        condition: service_completed_successfully
      frontend:
        condition: service_started
      # gql_forms:
      #   condition: service_healthy
      # gql_facilities:
      #   condition: service_healthy
      # gql_events:
      #   condition: service_healthy
      # gql_granting:
      #   condition: service_healthy
      # gql_lessons:
      #   condition: service_healthy
      # gql_projects:
      #   condition: service_healthy
      # gql_ug:
      #   condition: service_healthy
      # gql_workflow:
      #   condition: service_healthy
      # gql_workflows:
      #   condition: service_healthy
      
    
    ports:
      - 31121:8000  # ray made this port number up




  gql_publications_a:
    image: kozmycz/gql_publications_a:latest
    container_name: z-gql_publications_a_Kozma
    # build:
    #   # context definuje cestu k popisu
    #   context: .
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - GQLUG_ENDPOINT_URL=http://gql_ug_hrbolek:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      yugabyte1:
        condition: service_started
      yugabyte2:
        condition: service_started
      yugabyte3:
        condition: service_started
      yugabyte-init:
        condition: service_completed_successfully
      frontend:
        condition: service_started
      # gql_forms:
      #   condition: service_healthy
      # gql_facilities:
      #   condition: service_healthy
      # gql_events:
      #   condition: service_healthy
      # gql_granting:
      #   condition: service_healthy
      # gql_lessons:
      #   condition: service_healthy
      # gql_projects:
      #   condition: service_healthy
      # gql_ug:
      #   condition: service_healthy
      # gql_workflow:
      #   condition: service_healthy
      # gql_workflows:
      #   condition: service_healthy
      # gql_documents:
      #   condition: service_healthy
      # gql_presences:
      #   condition: service_healthy

    ports:
      - 31223:8000  # ray made this port number up




  gql_grantinga:
    image: hieuductran231/gql_granting:main
    container_name: z-gql_grantinga_Tran
    # build:
    #   # context definuje cestu k popisu
    #   context: .
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - GQLUG_ENDPOINT_URL=http://gql_ug_hrbolek:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=True
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      yugabyte1:
        condition: service_started
      yugabyte2:
        condition: service_started
      yugabyte3:
        condition: service_started
      yugabyte-init:
        condition: service_completed_successfully
      frontend:
        condition: service_started
      # gql_forms:
      #   condition: service_healthy
      # gql_facilities:
      #   condition: service_healthy
      # gql_events:
      #   condition: service_healthy
      # gql_granting:
      #   condition: service_healthy
      # gql_lessons:
      #   condition: service_healthy
      # gql_projects:
      #   condition: service_healthy
      # gql_ug:
      #   condition: service_healthy
      # gql_workflow:
      #   condition: service_healthy
      # gql_workflows:
      #   condition: service_healthy
      # gql_documents:
      #   condition: service_healthy
      # gql_presences:
      #   condition: service_healthy
    
    ports:
      - 31122:8000  # ray made this port number up


  gql_surveys:
    image: komandosscz/surveys:latest
    container_name: z-gql_surveys_Koza_Matejka
    # build:
    #   # context definuje cestu k popisu
    #   context: .
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - GQLUG_ENDPOINT_URL=http://gql_ug_hrbolek:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      yugabyte1:
        condition: service_started
      yugabyte2:
        condition: service_started
      yugabyte3:
        condition: service_started
      yugabyte-init:
        condition: service_completed_successfully
      frontend:
        condition: service_started
      # gql_forms:
      #   condition: service_healthy
      # gql_facilities:
      #   condition: service_healthy
      # gql_events:
      #   condition: service_healthy
      # gql_granting:
      #   condition: service_healthy
      # gql_lessons:
      #   condition: service_healthy
      # gql_projects:
      #   condition: service_healthy
      # gql_ug:
      #   condition: service_healthy
      # gql_workflow:
      #   condition: service_healthy
      # gql_workflows:
      #   condition: service_healthy
      # gql_documents:
      #   condition: service_healthy
      # gql_presences:
      #   condition: service_healthy
    
    ports:
      - 32122:8000  # ray made this port number up




  gql_preferences:
    image: haki22/gql-preferences:latest
    container_name: z-gql_preferences_Sittek

    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - GQLUG_ENDPOINT_URL=http://gql_ug_hrbolek:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=True

    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      postgres:
        condition: service_started
      yugabyte1:
        condition: service_started
      yugabyte2:
        condition: service_started
      yugabyte3:
        condition: service_started
      yugabyte-init:
        condition: service_completed_successfully
      frontend:
        condition: service_started
      # gql_forms:
      #   condition: service_healthy
      # gql_facilities:
      #   condition: service_healthy
      # gql_events:
      #   condition: service_healthy
      # gql_granting:
      #   condition: service_healthy
      # gql_lessons:
      #   condition: service_healthy
      # gql_projects:
      #   condition: service_healthy
      # gql_ug:
      #   condition: service_healthy
      # gql_workflow:
      #   condition: service_healthy
      # gql_workflows:
      #   condition: service_healthy
      # gql_documents:
      #   condition: service_healthy
      # gql_presences:
      #   condition: service_healthy

    ports:
      - 32123:8000  # ray made this port number up