# volumes:
#   roach1:
#   roach2:
#   roach3:

networks:
  roachnet:
    driver: bridge


services:
  ###################### cockroach ######################
  roach1:
    image: cockroachdb/cockroach:latest
    container_name: roach1
    hostname: roach1
    restart: unless-stopped

    # joins node with the others creating a cluster
    command: start --advertise-addr=roach1:26357 --http-addr=roach1:8080 --listen-addr=roach1:26357 --sql-addr=roach1:26257 --insecure --join=roach1:26357,roach2:26357,roach3:26357
    # command: start --advertise-addr=roach1 --http-addr=roach1 --listen-addr=roach1 --sql-addr=roach1 --insecure --join=roach1,roach2,roach3
    networks:
      - roachnet
    ports:
      - "26257:26257"
      - "8080:8080"
    # volumes:
    #   - roach1:/cockroach/cockroach-data


  roach2:
    image: cockroachdb/cockroach:latest
    container_name: roach2
    hostname: roach2
    restart: unless-stopped

    # joins node with the others creating a cluster
    command: start --advertise-addr=roach2:26357 --http-addr=roach2:8081 --listen-addr=roach2:26357 --sql-addr=roach2:26258 --insecure --join=roach1:26357,roach2:26357,roach3:26357
    # command: start --advertise-addr=roach2 --http-addr=roach2 --listen-addr=roach2 --sql-addr=roach2 --insecure --join=roach1,roach2,roach3
    networks:
      - roachnet
    ports:
      - "26258:26258"
      - "8081:8081"
    # volumes:
    #   - roach2:/cockroach/cockroach-data
  

  roach3:
    image: cockroachdb/cockroach:latest
    container_name: roach3
    hostname: roach3
    restart: unless-stopped
    # joins node with the others creating a cluster &&
    command: start --advertise-addr=roach3:26357 --http-addr=roach3:8082 --listen-addr=roach3:26357 --sql-addr=roach3:26259 --insecure --join=roach1:26357,roach2:26357,roach3:26357
    # command: start --advertise-addr=roach3 --http-addr=roach3 --listen-addr=roach3 --sql-addr=roach3 --insecure --join=roach1,roach2,roach3
    networks:
      - roachnet
    ports:
      - "26259:26259"
      - "8082:8082"
    # volumes:
    #   - roach3:/cockroach/cockroach-data


  # creates database "data" after yugabyte nodes start
  # roach-init:
  #   image: cockroachdb/cockroach:latest
  #   container_name: roach-init
  #   depends_on:
  #     - roach1
  #     - roach2
  #     - roach3
  #   entrypoint: /bin/sh
  #   command: -c "sleep 20 && /home/cockroach/bin/ysqlsh --echo-queries --host=roach1:26257 init --insecure"


############# apollo #######################
  apollo:
    image: hrbolek/apollo_federation:latest
    container_name: apollo
    environment:
      # promenne, ktere lze cist v kontejneru
      - PORT=3000
      - |
        SERVICES=
        [
          {"name": "ug", "url": "http://gql_ug:8000/gql"}
        ]
 
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku (vsimnete si portu a srovnejte s portem v environment)
      interval: 60s
      retries: 3
      start_period: 60s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    networks:
      - roachnet
    depends_on:
      - gql_ug

    ports: #v deploymentu by nebylo zadne mapovani portu
      - 33000:3000


######################## student containers ##############################
  gql_ug:
    image: kavic/ug:cockroach_1.0
    container_name: z-gql_ug
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=
      - POSTGRES_HOST=roach1:26257
      - POSTGRES_DB=data
      - IS_COCKROACH=True
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=True
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql || exit 1"
      interval: 30s
      retries: 10
      start_period: 30s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    networks:
      - roachnet


    # check out gql evolution -> DBDefinitions/__init__.py/ComposeConnecttionString() 