version: '3.8'

services:
  pgadmin:
    container_name: pgadmin4
    image: "dpage/pgadmin4:7.8"
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:80"


############# apollo #######################
  apollo:
    image: hrbolek/apollo_federation:latest
    container_name: apollo
    environment:
      # promenne, ktere lze cist v kontejneru
      - PORT=3000
      - |
        SERVICES=
        [
          {"name": "ug", "url": "http://gql_ug:8000/gql"},
          {"name": "forms", "url": "http://gql_forms:8000/gql"},
          {"name": "events", "url": "http://gql_events:8000/gql"},
          {"name": "granting", "url": "http://gql_granting:8000/gql"},
          {"name": "projects", "url": "http://gql_projects:8000/gql"},
          {"name": "workflow", "url": "http://gql_workflow:8000/gql"},
          {"name": "workflows", "url": "http://gql_workflows:8000/gql"},
          {"name": "documents", "url": "http://gql_documents:8000/gql"},
          {"name": "presences", "url": "http://gql_presences:8000/gql"},
          {"name": "surveys", "url": "http://gql_surveys:8000/gql"}
        ]
      # ug has to be part of services

      # {"name": "ug", "url": "http://gql_ug_hrbolek:8000/gql"},
      # {"name": "forms", "url": "http://gql_forms:8000/gql"},
      # {"name": "events", "url": "http://gql_events:8000/gql"},
      # {"name": "externalids", "url": "http://gql_externalids:8000/gql"},
      # {"name": "granting", "url": "http://gql_granting:8000/gql"},
      # {"name": "workflow", "url": "http://gql_workflow:8000/gql"},
      # {"name": "workflows", "url": "http://gql_workflows:8000/gql"},
      # {"name": "documents", "url": "http://gql_documents:8000/gql"},
      # {"name": "surveys", "url": "http://gql_surveys:8000/gql"}


      # services
      # {"name": "ug", "url": "http://gql_ug_hrbolek:8000/gql"},
      # {"name": "ug", "url": "http://gql_ug:8000/gql"},
      # {"name": "forms", "url": "http://gql_forms:8000/gql"},
      # {"name": "facilities", "url": "http://gql_facilities:8000/gql"},
      # {"name": "events", "url": "http://gql_events:8000/gql"},
      # {"name": "externalids", "url": "http://gql_externalids:8000/gql"},
      # {"name": "granting", "url": "http://gql_granting:8000/gql"},
      # {"name": "lessons", "url": "http://gql_lessons:8000/gql"},
      # {"name": "projects", "url": "http://gql_projects:8000/gql"},
      # {"name": "workflow", "url": "http://gql_workflow:8000/gql"},
      # {"name": "workflows", "url": "http://gql_workflows:8000/gql"},
      # {"name": "documents", "url": "http://gql_documents:8000/gql"},
      # {"name": "presences", "url": "http://gql_presences:8000/gql"},
      # {"name": "publications_a", "url": "http://gql_publications_a:8000/gql"},
      # {"name": "grantinga", "url": "http://gql_grantinga:8000/gql"}
      # {"name": "preferences", "url": "http://gql_preferences:8000/gql"}
      # {"name": "surveys", "url": "http://gql_surveys:8000/gql"}

    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku (vsimnete si portu a srovnejte s portem v environment)
      interval: 60s
      retries: 3
      start_period: 60s
      timeout: 10s
    
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    ports: #v deploymentu by nebylo zadne mapovani portu
    #   # vnejsi port : port, kde sluzbu poskytuje kontejner
      - 33000:3000
    depends_on:
      - gql_events
      - gql_externalids
      - gql_facilities
      - gql_forms
      - gql_granting
      - gql_lessons
      - gql_preferences
      - gql_projects
      - gql_surveys
      - gql_ug
      - gql_workflow
      - gql_workflows
      - gql_documents
      - gql_presences
      - gql_publications_a
      - gql_grantinga
    

######################## frontend ##############################
  frontend:
    image: hrbolek/frontend
    container_name: frontend
    environment:
      - DEMO=False
      - GQL_PROXY=http://apollo:3000/api/gql/
      - SALT=fe1c71b2-74c0-41e5-978f-eecbffac7418    # copied from github.com/hrbolek/_uois
    ports:
      - 33080:8000
    depends_on:
      apollo:
        condition: service_started


######################## student containers ##############################
  
  # postgres_gql_ug_hrbolek:
  #   image: "postgres:16.0"
  #   container_name: postgres_gql_ug_hrbolek
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_USER: root
  #     POSTGRES_PASSWORD: root
  #     POSTGRES_DB: data
  #   ports:
  #     - "5433:5432"

  # gql_ug_hrbolek:
  #   image: hrbolek/gql_ug:latest
  #   container_name: z-gql_ug_Hrbolek
  #   environment:
  #     - POSTGRES_HOST=postgres_gql_ug_hrbolek:5432
  #     - POSTGRES_USER=root
  #     - POSTGRES_PASSWORD=root
  #     - POSTGRES_DB=data
  #     - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
  #     - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
  #     - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
  #     - DEMO=True
  #   healthcheck:
  #     # definice, umoznujici provest test, zda je kontejner v poradku
  #     test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql || exit 1"
  #     interval: 30s
  #     retries: 10
  #     start_period: 30s
  #     timeout: 10s
  #   restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
  #   depends_on:
  #     postgres_gql_ug_hrbolek:
  #       condition: service_started



  postgres_gql_ug:
    image: "postgres:16.0"
    container_name: postgres_gql_ug
    restart: unless-stopped
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: data
    ports:
      - "5440:5432"

  gql_ug:
    image: kavic/ug:latest
    container_name: z-gql_ug_Holik-Kava
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_HOST=postgres_gql_ug:5432
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=True
      - GQL_PROXY=http://apollo:3000/api/gql/
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy

    depends_on:
      # kontejnery, ktere musi byt spusteny drive
      postgres_gql_ug:
        condition: service_started

    ports: #v deploymentu by nebylo zadne mapovani portu
    #   # vnejsi port : port, kde sluzbu poskytuje kontejner
      - 31120:8000



  postgres_gql_events:
    image: "postgres:16.0"
    container_name: postgres_gql_events
    restart: unless-stopped
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: data
    ports:
      - "5435:5432"

  gql_events:
    image: nafreju2/gql_events:latest
    container_name: z-gql_events_Bures-Sedlackova
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_HOST=postgres_gql_events:5432
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      postgres_gql_events:
        condition: service_started
    ports:
      - 31126:8000  # ray made up this port number



  postgres_gql_externalids:
    image: "postgres:16.0"
    container_name: postgres_gql_externalids
    restart: unless-stopped
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: data
    ports:
      - "5436:5432"

  gql_externalids:
    image: gjia/gql_externalids:main
    container_name: z-gql_externalids_Quach-Nguyen
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_HOST=postgres_gql_externalids:5432
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      postgres_gql_externalids:
        condition: service_started
    ports:
      - 32801:8000 # ray made up this port number



  postgres_gql_facilities:
    image: "postgres:16.0"
    container_name: postgres_gql_facilities
    restart: unless-stopped
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: data
    ports:
      - "5434:5432"

  gql_facilities:
    image: vitekr/gql_facilities:v1.2.6
    container_name: z-gql_facilities_Rout-Stacha
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_HOST=postgres_gql_facilities:5432
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
      # kontejnery, ktere musi byt spusteny drive
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 60s
      retries: 10
      start_period: 60s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      postgres_gql_facilities:
        condition: service_started
    ports: #v deploymentu by nebylo zadne mapovani portu
       - 31125:8000



  postgres_gql_forms:
    image: "postgres:16.0"
    container_name: postgres_gql_forms
    restart: unless-stopped
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: data
    ports:
      - "5432:5432"
  
  gql_forms:
    image: hrbolek/gql_forms:latest
    container_name: z-gql_forms_Hrbolek
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_HOST=postgres_gql_forms:5432
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=True
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 30s
      retries: 10
      start_period: 30s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      postgres_gql_forms:
        condition: service_started
    ports:
      - 31127:8000  # ray made this port number up
  
  

  postgres_gql_granting:
    image: "postgres:16.0"
    container_name: postgres_gql_granting
    restart: unless-stopped
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: data
    ports:
      - "5437:5432"

  gql_granting:
    image: oklement/gql_granting:latest
    container_name: z-gql_granting_Klement-Novotny-Wala
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_HOST=postgres_gql_granting:5432
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=True
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      postgres_gql_granting:
        condition: service_started
    ports:
      - 32811:8000 # ray made up this port number



  postgres_gql_lessons:
    image: "postgres:16.0"
    container_name: postgres_gql_lessons
    restart: unless-stopped
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: data
    ports:
      - "5438:5432"

  gql_lessons:
    image: luknowo/gql_lessons:latest
    container_name: z-gql_lessons_Novotny-Veverka
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_HOST=postgres_gql_lessons:5432
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      postgres_gql_lessons:
        condition: service_started
    ports:
      - 31124:8000 # ray made up this port number



  postgres_gql_preferences:
    image: "postgres:16.0"
    container_name: postgres_gql_preferences
    restart: unless-stopped
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: data
    ports:
      - "5448:5432"

  gql_preferences:
    image: haki22/gql-preferences:latest
    container_name: z-gql_preferences_Sittek
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_HOST=postgres_gql_preferences:5432
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=True

    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      postgres_gql_preferences:
        condition: service_started
    ports:
      - 32123:8000  # ray made this port number up



  postgres_gql_projects:
    image: "postgres:16.0"
    container_name: postgres_gql_projects
    restart: unless-stopped
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: data
    ports:
      - "5439:5432"

  gql_projects:
    image: frajxd/gql_projects:latest
    container_name: z-gql_projects_Smid-Spanik
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_HOST=postgres_gql_projects:5432
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=True
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      postgres_gql_projects:
        condition: service_started
    ports:
      - 32800:8000



  postgres_gql_surveys:
    image: "postgres:16.0"
    container_name: postgres_gql_surveys
    restart: unless-stopped
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: data
    ports:
      - "5447:5432"

  gql_surveys:
    image: komandosscz/surveys:latest
    container_name: z-gql_surveys_Koza_Matejka
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_HOST=postgres_gql_surveys:5432
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      postgres_gql_surveys:
        condition: service_started
    ports:
      - 32122:8000  # ray made this port number up



  postgres_gql_workflow:
    image: "postgres:16.0"
    container_name: postgres_gql_workflow
    restart: unless-stopped
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: data
    ports:
      - "5441:5432"

  gql_workflow:
    image: taido028/gql_workflow:latest
    container_name: z-gql_workflow_Bui-Do
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_HOST=postgres_gql_workflow:5432
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      postgres_gql_workflow:
        condition: service_started
    ports:
      - 31123:8000



  postgres_gql_workflows:
    image: "postgres:16.0"
    container_name: postgres_gql_workflows
    restart: unless-stopped
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: data
    ports:
      - "5442:5432"

  gql_workflows:
    image: angell1337/gql_workflows:latest
    container_name: z-gql_workflows_Krivohlavek-Samolej
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_HOST=postgres_gql_workflows:5432
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=True
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      postgres_gql_workflows:
        condition: service_started
    ports:
      - 31133:8000  # ray made up this port number



  postgres_gql_documents:
    image: "postgres:16.0"
    container_name: postgres_gql_documents
    restart: unless-stopped
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: data
    ports:
      - "5443:5432"

  gql_documents:
    image: tadblack/gql_documents:latest
    container_name: z-gql_documents_Masek-Paldus
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_HOST=postgres_gql_documents:5432
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      postgres_gql_documents:
        condition: service_started
    ports:
      - 20088:8000



  postgres_gql_presences:
    image: "postgres:16.0"
    container_name: postgres_gql_presences
    restart: unless-stopped
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: data
    ports:
      - "5444:5432"

  gql_presences:
    image: davidnemecek4227/gql_presences:main
    container_name: z-gql_presences_Nemecek
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_HOST=postgres_gql_presences:5432
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=True
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      postgres_gql_presences:
        condition: service_started
    ports:
      - 31121:8000  # ray made this port number up



  postgres_gql_publications_a:
    image: "postgres:16.0"
    container_name: postgres_gql_publications_a
    restart: unless-stopped
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: data
    ports:
      - "5445:5432"

  gql_publications_a:
    image: kozmycz/gql_publications_a:latest
    container_name: z-gql_publications_a_Kozma
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_HOST=postgres_gql_publications_a:5432
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=true
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      postgres_gql_publications_a:
        condition: service_started
    ports:
      - 31223:8000  # ray made this port number up



  postgres_gql_grantinga:
    image: "postgres:16.0"
    container_name: postgres_gql_grantinga
    restart: unless-stopped
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: data
    ports:
      - "5446:5432"

  gql_grantinga:
    image: hieuductran231/gql_granting:main
    container_name: z-gql_grantinga_Tran
    # build:
    #   # context definuje cestu k popisu
    #   context: .
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_HOST=postgres_gql_grantinga:5432
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=True
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 20s
      retries: 10
      start_period: 20s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      postgres_gql_grantinga:
        condition: service_started

    ports:
      - 31122:8000  # ray made this port number up